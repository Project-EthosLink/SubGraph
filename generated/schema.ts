// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SocialTokenHolding extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SocialTokenHolding entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SocialTokenHolding must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SocialTokenHolding", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SocialTokenHolding | null {
    return changetype<SocialTokenHolding | null>(
      store.get_in_block("SocialTokenHolding", id)
    );
  }

  static load(id: string): SocialTokenHolding | null {
    return changetype<SocialTokenHolding | null>(
      store.get("SocialTokenHolding", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get SocialTokenId(): BigInt {
    let value = this.get("SocialTokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set SocialTokenId(value: BigInt) {
    this.set("SocialTokenId", Value.fromBigInt(value));
  }

  get Creator(): Bytes {
    let value = this.get("Creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set Creator(value: Bytes) {
    this.set("Creator", Value.fromBytes(value));
  }

  get Holder(): Bytes {
    let value = this.get("Holder");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set Holder(value: Bytes) {
    this.set("Holder", Value.fromBytes(value));
  }

  get IsLaunched(): boolean {
    let value = this.get("IsLaunched");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set IsLaunched(value: boolean) {
    this.set("IsLaunched", Value.fromBoolean(value));
  }

  get URI(): string {
    let value = this.get("URI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set URI(value: string) {
    this.set("URI", Value.fromString(value));
  }

  get LaunchingPrice(): BigInt {
    let value = this.get("LaunchingPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set LaunchingPrice(value: BigInt) {
    this.set("LaunchingPrice", Value.fromBigInt(value));
  }

  get TotalAmountMinted(): BigInt {
    let value = this.get("TotalAmountMinted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set TotalAmountMinted(value: BigInt) {
    this.set("TotalAmountMinted", Value.fromBigInt(value));
  }

  get AmountAvailbleforSale(): BigInt {
    let value = this.get("AmountAvailbleforSale");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set AmountAvailbleforSale(value: BigInt) {
    this.set("AmountAvailbleforSale", Value.fromBigInt(value));
  }

  get AmountOwnedByHolder(): BigInt {
    let value = this.get("AmountOwnedByHolder");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set AmountOwnedByHolder(value: BigInt) {
    this.set("AmountOwnedByHolder", Value.fromBigInt(value));
  }

  get AmountListedByHolder(): BigInt {
    let value = this.get("AmountListedByHolder");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set AmountListedByHolder(value: BigInt) {
    this.set("AmountListedByHolder", Value.fromBigInt(value));
  }

  get PriceSetByHolder(): BigInt {
    let value = this.get("PriceSetByHolder");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set PriceSetByHolder(value: BigInt) {
    this.set("PriceSetByHolder", Value.fromBigInt(value));
  }

  get ReSaleRoyalty(): BigInt {
    let value = this.get("ReSaleRoyalty");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ReSaleRoyalty(value: BigInt) {
    this.set("ReSaleRoyalty", Value.fromBigInt(value));
  }

  get Transferrable(): boolean {
    let value = this.get("Transferrable");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set Transferrable(value: boolean) {
    this.set("Transferrable", Value.fromBoolean(value));
  }
}

export class Creator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Creator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Creator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Creator", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Creator | null {
    return changetype<Creator | null>(store.get_in_block("Creator", id));
  }

  static load(id: string): Creator | null {
    return changetype<Creator | null>(store.get("Creator", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get CreatorAddress(): Bytes {
    let value = this.get("CreatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set CreatorAddress(value: Bytes) {
    this.set("CreatorAddress", Value.fromBytes(value));
  }

  get URI(): string {
    let value = this.get("URI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set URI(value: string) {
    this.set("URI", Value.fromString(value));
  }
}
